// Raabta Firestore Rules - Enhanced for Better Call and Group Permissions
rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {

    // ✅ Users can access their own profile and read others for calls/contacts
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow read access to other users' basic info for contacts/calls
      allow read: if request.auth != null;
    }

    // ✅ Groups - Enhanced permissions for better group management
    match /groups/{groupId} {
      // Allow read/write if user is a member of the group
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.members;
      // Allow create if user is in the initial members list
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.members;
      // Allow list access to find groups user is a member of
      allow list: if request.auth != null;
      
      // Messages within groups
      match /messages/{messageId} {
        // Allow access if user is a member of the parent group
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
        // Allow create if user is a group member
        allow create: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
        // Allow list to fetch messages
        allow list: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
      }
    }

    // ✅ Conversations - Enhanced for better conversation management
    match /conversations/{conversationId} {
      // Allow read/write if user is a participant
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      // Allow create if user is in participants
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      // Allow list to find user's conversations
      allow list: if request.auth != null;
      
      // Messages within conversations
      match /messages/{messageId} {
        // Allow access if user is a participant in the conversation
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        // Allow list to fetch messages
        allow list: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    // ✅ Direct messages collection (if used)
    match /messages/{messageId} {
      // Allow read/write if user is sender or receiver
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.receiverId ||
        (resource.data.participants != null && request.auth.uid in resource.data.participants)
      );
      // Allow create if user is the sender
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
      // Allow list for user's messages
      allow list: if request.auth != null;
    }

    // ✅ Calls - Enhanced permissions for comprehensive call handling
    match /calls/{callId} {
      // Allow read/write if user is caller or receiver
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId ||
        (resource.data.participants != null && request.auth.uid in resource.data.participants)
      );
      // Allow create if user is the caller
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.callerId;
      // Allow update for call status changes
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId ||
        (resource.data.participants != null && request.auth.uid in resource.data.participants)
      );
      // Allow list to get user's call history
      allow list: if request.auth != null;
    }

    // ✅ Call sessions - for ongoing call management
    match /call_sessions/{sessionId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId ||
        (resource.data.participants != null && request.auth.uid in resource.data.participants)
      );
      allow create: if request.auth != null;
      allow list: if request.auth != null;
    }

    // ✅ FCM tokens for notifications
    match /fcm_tokens/{tokenId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow list: if request.auth != null;
    }

    // ✅ User presence/status
    match /user_presence/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow list: if request.auth != null;
    }

    // ✅ Agora tokens (for video calls)
    match /agora_tokens/{tokenId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow list: if request.auth != null;
    }

    // ✅ User contacts/friends
    match /user_contacts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // ✅ Group invitations
    match /group_invitations/{invitationId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.inviterId ||
        request.auth.uid == resource.data.inviteeId
      );
      allow create: if request.auth != null;
      allow list: if request.auth != null;
    }

    // Default deny for unmatched documents - but allow list operations for authenticated users
    match /{document=**} {
      allow read, write: if false;
      allow list: if request.auth != null;
    }
  }
}
